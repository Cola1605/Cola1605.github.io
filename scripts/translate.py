#!/usr/bin/env python3
"""
Auto Translation Script for Hugo Blog
Translates Vietnamese content to Japanese using AI services
"""

import sys
import os
import re
import json
from pathlib import Path
import time

# Optional imports - handle gracefully if not available
try:
    import requests
    HAS_REQUESTS = True
except ImportError:
    HAS_REQUESTS = False
    print("‚ö†Ô∏è requests module not available, using local translation only")

def translate_with_openai(text, source_lang="vi", target_lang="ja"):
    """Translate text using OpenAI API (requires API key)"""
    try:
        # This would require OpenAI API key setup
        # For demo purposes, we'll use a mock translation
        print("ü§ñ Using OpenAI translation service...")
        
        # Mock response for demo - in real implementation, use OpenAI API
        # return openai_translate_call(text, source_lang, target_lang)
        
        return mock_translate(text)
    except Exception as e:
        print(f"‚ùå OpenAI translation failed: {e}")
        return None

def translate_with_google(text, source_lang="vi", target_lang="ja"):
    """Translate text using Google Translate API (requires API key)"""
    try:
        # This would require Google Translate API key setup
        print("üåç Using Google Translate service...")
        
        # Mock response for demo - in real implementation, use Google API
        return mock_translate(text)
    except Exception as e:
        print(f"‚ùå Google translation failed: {e}")
        return None

def mock_translate(text):
    """Enhanced translation for demonstration - replace with real AI service"""
    
    # Vietnamese to Japanese translation mappings (enhanced)
    translations = {
        # Headers and titles
        "H·ªçc h·ªèi kinh nghi·ªám": "ÁµåÈ®ì„ÇíÂ≠¶„Å∂",
        "t·ª´": "„Åã„Çâ",
        "Heavy User": "„Éò„Éì„Éº„É¶„Éº„Ç∂„Éº",
        "ƒê·ªëi t∆∞·ª£ng m·ª•c ti√™u": "ÂØæË±°Ë™≠ËÄÖ",
        "M·ª•c l·ª•c": "ÁõÆÊ¨°",
        "Gi·ªõi thi·ªáu": "Á¥π‰ªã",
        "T·ªïng quan": "Ê¶ÇË¶Å",
        "K·∫øt lu·∫≠n": "ÁµêË´ñ",
        
        # Content words
        "b√†i vi·∫øt": "Ë®ò‰∫ã",
        "t·ªïng h·ª£p": "„Åæ„Å®„ÇÅ",
        "nh·ªØng m·∫πo": "„Ç≥„ÉÑ",
        "s·ª≠ d·ª•ng": "‰ΩøÁî®",
        "trong c√¥ng vi·ªác": "‰ªï‰∫ã„Åß",
        "k·ªπ thu·∫≠t": "„ÉÜ„ÇØ„Éã„ÉÉ„ÇØ",
        "t·∫°o": "‰ΩúÊàê",
        "prompt": "„Éó„É≠„É≥„Éó„Éà",
        "kh·∫£o s√°t": "Ë™øÊüª",
        "g·ª£i √Ω": "„Éí„É≥„Éà",
        "·ª©ng d·ª•ng": "Ê¥ªÁî®",
        "hi·ªáu qu·∫£": "ÂäπÁéáÁöÑ",
        "h∆°n": "„Çà„Çä",
        
        # Target audience
        "Nh·ªØng ng∆∞·ªùi": "‰∫∫",
        "m·ªõi b·∫Øt ƒë·∫ßu": "ÂàùÂøÉËÄÖ",
        "mu·ªën": "„Åó„Åü„ÅÑ",
        "th√†nh th·∫°o": "ÁøíÂæó",
        "an to√†n": "ÂÆâÂÖ®",
        
        # Common tech terms
        "c√¥ng ngh·ªá": "ÊäÄË°ì",
        "l·∫≠p tr√¨nh": "„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞", 
        "ph·∫ßn m·ªÅm": "„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢",
        "·ª©ng d·ª•ng": "„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥",
        "website": "„Ç¶„Çß„Éñ„Çµ„Ç§„Éà",
        "blog": "„Éñ„É≠„Ç∞",
        "h∆∞·ªõng d·∫´n": "„Ç¨„Ç§„Éâ",
        "tutorial": "„ÉÅ„É•„Éº„Éà„É™„Ç¢„É´",
        
        # AI terms
        "tr√≠ tu·ªá nh√¢n t·∫°o": "‰∫∫Â∑•Áü•ËÉΩ",
        "machine learning": "Ê©üÊ¢∞Â≠¶Áøí",
        "deep learning": "„Éá„Ç£„Éº„Éó„É©„Éº„Éã„É≥„Ç∞",
        "AI": "AI",
        
        # Programming terms
        "framework": "„Éï„É¨„Éº„É†„ÉØ„Éº„ÇØ",
        "library": "„É©„Ç§„Éñ„É©„É™",
        "API": "API",
        "database": "„Éá„Éº„Çø„Éô„Éº„Çπ",
        "server": "„Çµ„Éº„Éê„Éº",
        "client": "„ÇØ„É©„Ç§„Ç¢„É≥„Éà",
        
        # Common phrases
        "Tham kh·∫£o": "ÂèÇËÄÉ",
        "Ngu·ªìn": "„ÇΩ„Éº„Çπ",
        "T√°c gi·∫£": "ËëóËÄÖ",
        "Ng√†y": "Êó•‰ªò",
        "URL": "URL",
        
        # Common words
        "v√†": "„Å®",
        "ho·∫∑c": "„Åæ„Åü„ÅØ", 
        "nh∆∞ng": "„Åó„Åã„Åó",
        "v√¨": "„Å™„Åú„Å™„Çâ",
        "n√™n": "„Å†„Åã„Çâ",
        "ƒë·ªÉ": "„Åü„ÇÅ„Å´",
        "v·ªõi": "„Å®",
        "trong": "„Åß",
        "tr√™n": "‰∏ä„Åß",
        "d∆∞·ªõi": "‰∏ã„Åß",
        "l√†": "„ÅØ",
        "g√¨": "‰Ωï",
        
        # Numbers
        "1.": "1.",
        "2.": "2.", 
        "3.": "3.",
        "4.": "4.",
        "5.": "5.",
        
        # Actions
        "x√¢y d·ª±ng": "ÊßãÁØâ", 
        "ph√°t tri·ªÉn": "ÈñãÁô∫",
        "thi·∫øt k·∫ø": "Ë®≠Ë®à",
        "tri·ªÉn khai": "Â±ïÈñã",
        "c√†i ƒë·∫∑t": "„Ç§„É≥„Çπ„Éà„Éº„É´",
        "c·∫•u h√¨nh": "Ë®≠ÂÆö",
        
        # Results
        "th√†nh c√¥ng": "ÊàêÂäü",
        "l·ªói": "„Ç®„É©„Éº",
        "ho√†n th√†nh": "ÂÆå‰∫Ü",
        "ƒëang x·ª≠ l√Ω": "Âá¶ÁêÜ‰∏≠",
        
        # Special phrases
        "c√≥ ƒë∆∞·ª£c": "Âæó„Çã",
        "k·∫øt qu·∫£": "ÁµêÊûú",
        "th·ªèa m√£n": "Ê∫ÄË∂≥",
        "t√¨nh hu·ªëng": "Áä∂Ê≥Å",
        "s·ªë l·∫ßn": "ÂõûÊï∞",
        "th·ª≠ nghi·ªám": "ÂÆüÈ®ì",
        "h√¨nh ·∫£nh": "ÁîªÂÉè",
    }
    
    # Apply translations
    translated_text = text
    for vi_word, ja_word in translations.items():
        # Use word boundaries for better matching
        pattern = r'\b' + re.escape(vi_word) + r'\b'
        translated_text = re.sub(pattern, ja_word, translated_text, flags=re.IGNORECASE)
    
    return translated_text

def translate_markdown_file(input_file, output_file, source_lang="vi", target_lang="ja"):
    """Translate a markdown file from Vietnamese to Japanese"""
    
    try:
        with open(input_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        print(f"üìÑ Processing: {input_file}")
        
        # Split frontmatter and content
        parts = content.split('---', 2)
        if len(parts) >= 3:
            frontmatter = parts[1]
            main_content = parts[2]
        else:
            frontmatter = ""
            main_content = content
        
        # Translate main content
        print("üîÑ Translating content...")
        
        # Try different translation services
        translated_content = None
        
        # Try OpenAI first (if available)
        translated_content = translate_with_openai(main_content, source_lang, target_lang)
        
        # Fallback to Google Translate
        if not translated_content:
            translated_content = translate_with_google(main_content, source_lang, target_lang)
        
        # Last resort: mock translation
        if not translated_content:
            print("‚ö†Ô∏è Using mock translation...")
            translated_content = mock_translate(main_content)
        
        # Translate frontmatter titles and descriptions
        translated_frontmatter = frontmatter
        if frontmatter:
            # Simple frontmatter translation
            translated_frontmatter = mock_translate(frontmatter)
        
        # Reconstruct file
        if frontmatter:
            result = f"---{translated_frontmatter}---{translated_content}"
        else:
            result = translated_content
        
        # Write output
        os.makedirs(os.path.dirname(output_file), exist_ok=True)
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(result)
        
        print(f"‚úÖ Translation completed: {output_file}")
        return True
        
    except Exception as e:
        print(f"‚ùå Translation failed: {e}")
        return False

def main():
    if len(sys.argv) != 5:
        print("Usage: python3 translate.py <input_file> <output_file> <source_lang> <target_lang>")
        sys.exit(1)
    
    input_file = sys.argv[1]
    output_file = sys.argv[2] 
    source_lang = sys.argv[3]
    target_lang = sys.argv[4]
    
    success = translate_markdown_file(input_file, output_file, source_lang, target_lang)
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()